// Code generated by MockGen. DO NOT EDIT.
// Source: helloworld.trpc.go
//
// Generated by this command:
//
//	mockgen -source=helloworld.trpc.go -destination=mock/helloworld.trpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	upstream "github.com/kickastone/trpc-demo/proto/upstream"
	gomock "go.uber.org/mock/gomock"
	client "trpc.group/trpc-go/trpc-go/client"
)

// MockHelloServiceService is a mock of HelloServiceService interface.
type MockHelloServiceService struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceServiceMockRecorder
}

// MockHelloServiceServiceMockRecorder is the mock recorder for MockHelloServiceService.
type MockHelloServiceServiceMockRecorder struct {
	mock *MockHelloServiceService
}

// NewMockHelloServiceService creates a new mock instance.
func NewMockHelloServiceService(ctrl *gomock.Controller) *MockHelloServiceService {
	mock := &MockHelloServiceService{ctrl: ctrl}
	mock.recorder = &MockHelloServiceServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloServiceService) EXPECT() *MockHelloServiceServiceMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHelloServiceService) ISGOMOCK() struct{} {
	return struct{}{}
}

// SayHello mocks base method.
func (m *MockHelloServiceService) SayHello(ctx context.Context, req *upstream.HelloRequest) (*upstream.HelloResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SayHello", ctx, req)
	ret0, _ := ret[0].(*upstream.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockHelloServiceServiceMockRecorder) SayHello(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloServiceService)(nil).SayHello), ctx, req)
}

// MockHelloServiceClientProxy is a mock of HelloServiceClientProxy interface.
type MockHelloServiceClientProxy struct {
	ctrl     *gomock.Controller
	recorder *MockHelloServiceClientProxyMockRecorder
}

// MockHelloServiceClientProxyMockRecorder is the mock recorder for MockHelloServiceClientProxy.
type MockHelloServiceClientProxyMockRecorder struct {
	mock *MockHelloServiceClientProxy
}

// NewMockHelloServiceClientProxy creates a new mock instance.
func NewMockHelloServiceClientProxy(ctrl *gomock.Controller) *MockHelloServiceClientProxy {
	mock := &MockHelloServiceClientProxy{ctrl: ctrl}
	mock.recorder = &MockHelloServiceClientProxyMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelloServiceClientProxy) EXPECT() *MockHelloServiceClientProxyMockRecorder {
	return m.recorder
}

// ISGOMOCK indicates that this struct is a gomock mock.
func (m *MockHelloServiceClientProxy) ISGOMOCK() struct{} {
	return struct{}{}
}

// SayHello mocks base method.
func (m *MockHelloServiceClientProxy) SayHello(ctx context.Context, req *upstream.HelloRequest, opts ...client.Option) (*upstream.HelloResponse, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, req}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SayHello", varargs...)
	ret0, _ := ret[0].(*upstream.HelloResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SayHello indicates an expected call of SayHello.
func (mr *MockHelloServiceClientProxyMockRecorder) SayHello(ctx, req any, opts ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, req}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SayHello", reflect.TypeOf((*MockHelloServiceClientProxy)(nil).SayHello), varargs...)
}
