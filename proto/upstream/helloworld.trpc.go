// Code generated by trpc-go/trpc-cmdline v1.0.9. DO NOT EDIT.
// source: helloworld.proto

package upstream

import (
	"context"
	"errors"
	"fmt"

	_ "trpc.group/trpc-go/trpc-go"
	"trpc.group/trpc-go/trpc-go/client"
	"trpc.group/trpc-go/trpc-go/codec"
	_ "trpc.group/trpc-go/trpc-go/http"
	"trpc.group/trpc-go/trpc-go/server"
)

// START ======================================= Server Service Definition ======================================= START

// HelloServiceService defines service.
type HelloServiceService interface {
	SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error)
}

func HelloServiceService_SayHello_Handler(svr interface{}, ctx context.Context, f server.FilterFunc) (interface{}, error) {
	req := &HelloRequest{}
	filters, err := f(req)
	if err != nil {
		return nil, err
	}
	handleFunc := func(ctx context.Context, reqbody interface{}) (interface{}, error) {
		return svr.(HelloServiceService).SayHello(ctx, reqbody.(*HelloRequest))
	}

	var rsp interface{}
	rsp, err = filters.Filter(ctx, req, handleFunc)
	if err != nil {
		return nil, err
	}
	return rsp, nil
}

// HelloServiceServer_ServiceDesc descriptor for server.RegisterService.
var HelloServiceServer_ServiceDesc = server.ServiceDesc{
	ServiceName: "trpc.demo.helloworld.HelloService",
	HandlerType: ((*HelloServiceService)(nil)),
	Methods: []server.Method{
		{
			Name: "/trpc.demo.helloworld.HelloService/SayHello",
			Func: HelloServiceService_SayHello_Handler,
		},
	},
}

// RegisterHelloServiceService registers service.
func RegisterHelloServiceService(s server.Service, svr HelloServiceService) {
	if err := s.Register(&HelloServiceServer_ServiceDesc, svr); err != nil {
		panic(fmt.Sprintf("HelloService register error:%v", err))
	}
}

// START --------------------------------- Default Unimplemented Server Service --------------------------------- START

type UnimplementedHelloService struct{}

func (s *UnimplementedHelloService) SayHello(ctx context.Context, req *HelloRequest) (*HelloResponse, error) {
	return nil, errors.New("rpc SayHello of service HelloService is not implemented")
}

// END --------------------------------- Default Unimplemented Server Service --------------------------------- END

// END ======================================= Server Service Definition ======================================= END

// START ======================================= Client Service Definition ======================================= START

// HelloServiceClientProxy defines service client proxy
type HelloServiceClientProxy interface {
	SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (rsp *HelloResponse, err error)
}

type HelloServiceClientProxyImpl struct {
	client client.Client
	opts   []client.Option
}

var NewHelloServiceClientProxy = func(opts ...client.Option) HelloServiceClientProxy {
	return &HelloServiceClientProxyImpl{client: client.DefaultClient, opts: opts}
}

func (c *HelloServiceClientProxyImpl) SayHello(ctx context.Context, req *HelloRequest, opts ...client.Option) (*HelloResponse, error) {
	ctx, msg := codec.WithCloneMessage(ctx)
	defer codec.PutBackMessage(msg)
	msg.WithClientRPCName("/trpc.demo.helloworld.HelloService/SayHello")
	msg.WithCalleeServiceName(HelloServiceServer_ServiceDesc.ServiceName)
	msg.WithCalleeApp("demo")
	msg.WithCalleeServer("helloworld")
	msg.WithCalleeService("HelloService")
	msg.WithCalleeMethod("SayHello")
	msg.WithSerializationType(codec.SerializationTypePB)
	callopts := make([]client.Option, 0, len(c.opts)+len(opts))
	callopts = append(callopts, c.opts...)
	callopts = append(callopts, opts...)
	rsp := &HelloResponse{}
	if err := c.client.Invoke(ctx, req, rsp, callopts...); err != nil {
		return nil, err
	}
	return rsp, nil
}

// END ======================================= Client Service Definition ======================================= END
